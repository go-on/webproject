{
  "Exports": {
    "*Buffer.Name": "(*Buffer) Name() string",
    "*Buffer.Print": "(*Buffer) Print()",
    "*Buffer.Println": "(*Buffer) Println()",
    "*Buffer.ServeHTTP": "(*Buffer) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*Buffer.SetString": "(*Buffer) SetString() string",
    "*Template.Add": "(*Template) Add(...interface{}) error",
    "*Template.Handle": "(*Template) Handle(...PlaceholderHandler) net/http.Handler",
    "*Template.MustAdd": "(*Template) MustAdd(...interface{}) *Template",
    "*Template.MustWrite": "(*Template) MustWrite([]byte)",
    "*Template.MustWriteByte": "(*Template) MustWriteByte(byte)",
    "*Template.MustWriteRune": "(*Template) MustWriteRune(rune)",
    "*Template.MustWriteSetter": "(*Template) MustWriteSetter(Setter)",
    "*Template.MustWriteString": "(*Template) MustWriteString(string)",
    "*Template.MustWriteTo": "(*Template) MustWriteTo(io.Writer)",
    "*Template.New": "(*Template) New() *Buffer",
    "*Template.Parse": "(*Template) Parse() *Template",
    "*Template.Replace": "(*Template) Replace(...Setter) *Buffer",
    "*Template.ReplaceMixed": "(*Template) ReplaceMixed(...interface{}) *Buffer",
    "*Template.ReplaceMixedTo": "(*Template) ReplaceMixedTo(*bytes.Buffer,...interface{}) *Buffer",
    "*Template.ReplaceTo": "(*Template) ReplaceTo(*bytes.Buffer,...Setter) *Buffer",
    "*Template.WriteSetter": "(*Template) WriteSetter(Setter) error",
    "*View.HasPlaceholder": "(*View) HasPlaceholder(string) bool",
    "*View.Placeholder": "(*View) Placeholder(string) Placeholder",
    "*View.Set": "(*View) Set(interface{}) []Setter",
    "*View.Tag": "(*View) Tag() string",
    "*View.Type": "(*View) Type() string",
    "Buffer": "type Buffer struct { *bytes.Buffer}",
    "Escaper": "type Escaper map[string](interface{}) string",
    "Escaper.View": "(Escaper) View(interface{},string) *View",
    "New": "func (string) *Template",
    "NewPlaceholder": "func (string,...func(interface{}) string) Placeholder",
    "NewPlaceholderHandler": "func (Placeholder,net/http.Handler) PlaceholderHandler",
    "Placeholder": "type Placeholder interface {Name() string; Set(interface{}) Setter; SetString() string; Setf(string,...interface{}) Setter; WriteTo(io.Writer)(int64,error)}",
    "PlaceholderHandler": "type PlaceholderHandler interface {net/http.Handler}",
    "Setter": "type Setter interface {Name() string; SetString() string; io.WriterTo}",
    "Template": "type Template struct { *Buffer}",
    "TemplatePlaceholder": "type TemplatePlaceholder struct {Escaper [](interface{}) string; Value string}",
    "TemplatePlaceholder.Name": "(TemplatePlaceholder) Name() string",
    "TemplatePlaceholder.Set": "(TemplatePlaceholder) Set(interface{}) Setter",
    "TemplatePlaceholder.SetString": "(TemplatePlaceholder) SetString() string",
    "TemplatePlaceholder.Setf": "(TemplatePlaceholder) Setf(string,...interface{}) Setter",
    "TemplatePlaceholder.WriteTo": "(TemplatePlaceholder) WriteTo(io.Writer)(int64,error)",
    "View": "type View struct{}",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/replacer.*Template.NewHandler": "(*Template) NewHandler(map[string]net/http.Handler) net/http.Handler",
    "github.com/go-on/replacer.*Template.NewSetter": "(*Template) NewSetter() *Setter",
    "github.com/go-on/replacer.*Template.Placeholders": "(*Template) Placeholders() []Placeholder",
    "github.com/go-on/replacer.*Template.ReplaceBytes": "(*Template) ReplaceBytes(map[Placeholder][]byte) []byte",
    "github.com/go-on/replacer.*Template.ReplaceStrings": "(*Template) ReplaceStrings(map[Placeholder]string) []byte",
    "github.com/go-on/replacer.NewTemplateBytes": "func ([]byte) *Template",
    "github.com/go-on/replacer.Placeholder": "type Placeholder string",
    "github.com/go-on/replacer.Placeholder.Name": "(Placeholder) Name() string",
    "github.com/go-on/replacer.Placeholder.String": "(Placeholder) String() string",
    "github.com/go-on/replacer.Template": "type Template struct{}",
    "github.com/go-on/replacer.init": ""
  },
  "Path": "github.com/go-on/template"
}
