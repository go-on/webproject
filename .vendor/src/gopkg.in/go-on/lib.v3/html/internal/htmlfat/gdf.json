{
  "Exports": {
    "Escape": "func (*github.com/go-on/fat.Field,interface{}) github.com/go-on/html.Html",
    "Escapef": "func (*github.com/go-on/fat.Field,string,...interface{}) github.com/go-on/html.Html",
    "Placeholder": "func (*github.com/go-on/fat.Field) github.com/go-on/template.Placeholder",
    "Register": "func (interface{})",
    "Setter": "func (*github.com/go-on/fat.Field) github.com/go-on/template.Setter",
    "Setters": "func (interface{}) []github.com/go-on/template.Setter",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/fat.*Field.Get": "(*Field) Get() interface{}",
    "github.com/go-on/fat.*Field.IsValid": "(*Field) IsValid() bool",
    "github.com/go-on/fat.*Field.MarshalJSON": "(*Field) MarshalJSON()([]byte,error)",
    "github.com/go-on/fat.*Field.MustScanAndValidate": "(*Field) MustScanAndValidate(string)",
    "github.com/go-on/fat.*Field.MustScanString": "(*Field) MustScanString(string)",
    "github.com/go-on/fat.*Field.MustSet": "(*Field) MustSet(interface{})",
    "github.com/go-on/fat.*Field.MustValidate": "(*Field) MustValidate()",
    "github.com/go-on/fat.*Field.Scan": "(*Field) Scan(interface{}) error",
    "github.com/go-on/fat.*Field.ScanAndValidate": "(*Field) ScanAndValidate(string) []error",
    "github.com/go-on/fat.*Field.ScanString": "(*Field) ScanString(string) error",
    "github.com/go-on/fat.*Field.Set": "(*Field) Set(interface{}) error",
    "github.com/go-on/fat.*Field.String": "(*Field) String() string",
    "github.com/go-on/fat.*Field.UnmarshalJSON": "(*Field) UnmarshalJSON([]byte) error",
    "github.com/go-on/fat.*Field.Validate": "(*Field) Validate() []error",
    "github.com/go-on/fat.*Field.Value": "(*Field) Value()(database/sql/driver.Value,error)",
    "github.com/go-on/fat.Field": "type Field struct { Type; FailedScanInput string; IsSet bool; Struct interface{}}",
    "github.com/go-on/fat.init": "",
    "github.com/go-on/html.Escaper": "template.Escaper{\n\u0009\"text\":\u0009handleStrings(html.EscapeString, true),\n\u0009\"\":\u0009handleStrings(html.EscapeString, true),\n\u0009\"html\":\u0009handleStrings(idem, true),\n\u0009\"comment\":\u0009handleStrings(idem, true),\n\u0009\"px\":\u0009units(\"%vpx\"),\n\u0009\"%\":\u0009units(\"%v%%\"),\n\u0009\"em\":\u0009units(\"%vem\"),\n\u0009\"pt\":\u0009units(\"%vpt\"),\n\u0009\"urlparam\":\u0009handleStrings(url.QueryEscape, false),\n}",
    "github.com/go-on/html.Html": "type Html string",
    "github.com/go-on/html.Html.Matches": "(Html) Matches(*Element) bool",
    "github.com/go-on/html.Html.Placeholder": "(Html) Placeholder() Placeholder",
    "github.com/go-on/html.Html.String": "(Html) String() string",
    "github.com/go-on/html.init": "",
    "github.com/go-on/meta.*Field.Set": "(*Field) Set(reflect.Value) error",
    "github.com/go-on/meta.Field": "type Field struct {Struct *Struct; Type reflect.StructField; Value *reflect.Value}",
    "github.com/go-on/meta.StructByValue": "func (reflect.Value)(*Struct,error)",
    "github.com/go-on/meta.init": "",
    "github.com/go-on/template.NewPlaceholder": "func (string,...func(interface{}) string) Placeholder",
    "github.com/go-on/template.Placeholder": "type Placeholder interface {Name() string; Set(interface{}) Setter; SetString() string; Setf(string,...interface{}) Setter; WriteTo(io.Writer)(int64,error)}",
    "github.com/go-on/template.Setter": "type Setter interface {Name() string; SetString() string; io.WriterTo}",
    "github.com/go-on/template.init": ""
  },
  "Path": "github.com/go-on/html/htmlfat"
}
