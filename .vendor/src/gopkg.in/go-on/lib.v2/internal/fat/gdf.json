{
  "Exports": {
    "*Field.Get": "(*Field) Get() interface{}",
    "*Field.IsValid": "(*Field) IsValid() bool",
    "*Field.MarshalJSON": "(*Field) MarshalJSON()([]byte,error)",
    "*Field.MustScanAndValidate": "(*Field) MustScanAndValidate(string)",
    "*Field.MustScanString": "(*Field) MustScanString(string)",
    "*Field.MustSet": "(*Field) MustSet(interface{})",
    "*Field.MustValidate": "(*Field) MustValidate()",
    "*Field.Scan": "(*Field) Scan(interface{}) error",
    "*Field.ScanAndValidate": "(*Field) ScanAndValidate(string) []error",
    "*Field.ScanString": "(*Field) ScanString(string) error",
    "*Field.Set": "(*Field) Set(interface{}) error",
    "*Field.String": "(*Field) String() string",
    "*Field.UnmarshalJSON": "(*Field) UnmarshalJSON([]byte) error",
    "*Field.Validate": "(*Field) Validate() []error",
    "*Field.Value": "(*Field) Value()(database/sql/driver.Value,error)",
    "Bool": "func (bool) *bool_",
    "Bools": "func (...bool) *slice",
    "Field": "type Field struct { Type; FailedScanInput string; IsSet bool; Struct interface{}}",
    "Float": "func (float64) *float_",
    "Floats": "func (...float64) *slice",
    "Int": "func (int64) *int_",
    "Ints": "func (...int64) *slice",
    "Map": "func (interface{}) *map_",
    "MapBools": "func (map[string]bool) *map_",
    "MapFloats": "func (map[string]float64) *map_",
    "MapInts": "func (map[string]int64) *map_",
    "MapStrings": "func (map[string]string) *map_",
    "MapTimes": "func (map[string]time.Time) *map_",
    "MapType": "func (string,...interface{}) *map_",
    "New": "func (interface{},interface{}) interface{}",
    "Proto": "func (interface{}) interface{}",
    "Slice": "func (string,...interface{}) *slice",
    "String": "func (string) *string_",
    "StringMustNotBeEmpty": "ValidaterFunc(func(f *Field) (err error) {\n\n\u0009if f.String() == \"\" {\n\u0009\u0009return fmt.Errorf(\"must not be empty\")\n\u0009}\n\u0009return\n})",
    "Strings": "func (...string) *slice",
    "StructType": "func (interface{}) string",
    "Time": "func (time.Time) *time_",
    "Times": "func (...time.Time) *slice",
    "Type": "type Type interface {Get() interface{}; Scan(string) error; Set(interface{}) error; String() string; Typ() string}",
    "Validater": "type Validater interface {Validate(*Field) error}",
    "ValidaterFunc": "type ValidaterFunc (*Field) error",
    "ValidaterFunc.Validate": "(ValidaterFunc) Validate(*Field) error",
    "Validaters": "func (...Validater) (*Field) []error",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/meta.*Field.Set": "(*Field) Set(reflect.Value) error",
    "github.com/go-on/meta.Field": "type Field struct {Struct *Struct; Type reflect.StructField; Value *reflect.Value}",
    "github.com/go-on/meta.StructByValue": "func (reflect.Value)(*Struct,error)",
    "github.com/go-on/meta.init": "",
    "github.com/metakeule/nil.NÃ¸": "func (interface{})",
    "github.com/metakeule/nil.init": ""
  },
  "Path": "github.com/go-on/fat"
}
